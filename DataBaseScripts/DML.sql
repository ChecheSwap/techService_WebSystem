/*ELIMINA UNA ORDEN DE SERVICIO Y SUS COMPONENTES INTERNOS: FALLAS_PRODUCTOS -> PRODUCTOS -> ORDEN SERVICIO*/
DROP PROCEDURE IF EXISTS SP_CANCEL_ORDER;
DELIMITER $$
CREATE PROCEDURE SP_CANCEL_ORDER(IN OID INT)
BEGIN
	BEGIN
		CALL SP_RESET_AI('FAILURES_PRODUCTS');
		DELETE FROM FAILURES_PRODUCTS WHERE PRODUCT_ID IN(SELECT ID FROM PRODUCTS WHERE ORDERS_ID = OID);
    END;
    
    BEGIN
    CALL SP_RESET_AI('PRODUCTS');
		DELETE FROM PRODUCTS WHERE ORDERS_ID = OID;
    END;
    
    BEGIN
		CALL SP_RESET_AI('SERVICE_ORDERS');
		DELETE FROM SERVICE_ORDERS WHERE ID = OID;
    END;
END;
$$


/*INGRESA PRODUCTOS QUE PERTENECEN A UN NUMERO DE ORDEN EXISTENTE EN TABLA PRODUCTOS RECIBE : SERIE PRODUCTO, NOMBRE CATEGORIA, MARCA, MODELO, DESCRIPCION, NUMERO DE ORDEN */
DROP PROCEDURE IF EXISTS SP_INSERT_PRODUCT;
DELIMITER $$
CREATE PROCEDURE SP_INSERT_PRODUCT(IN NSERIE VARCHAR(100), IN CATTYPE VARCHAR(100), IN XMARCA VARCHAR(100), IN XMODELO VARCHAR(100), IN XDESCRIPCION VARCHAR(500), IN ORDER_ID INT)
BEGIN

	DECLARE CATID INT;
    SET CATID = GET_PRODUCT_CATEGORIEID(CATTYPE);
    
    
	BEGIN
		CALL SP_RESET_AI('PRODUCTS');
    END;
    
	INSERT INTO PRODUCTS(ORDERS_ID,CATEGORIA_ID,DESCRIPCION, MARCA, MODELO, NUMERO_SERIE) VALUES(ORDER_ID,CATID,XDESCRIPCION, XMARCA, XMODELO, NSERIE);
END;
$$


/*DEVUELVE EL ID DE CATEORIA DE PRODUCTO DE LA TABLA PRODUCT_CATEGORIES RECIBE : NOMBRE DE LA CATEGORIA*/

DROP FUNCTION IF EXISTS GET_PRODUCT_CATEGORIEID;
DELIMITER $$
CREATE FUNCTION GET_PRODUCT_CATEGORIEID(XNAME VARCHAR(100)) RETURNS INT DETERMINISTIC
BEGIN
	DECLARE VAL INT DEFAULT NULL;
    
    SELECT ID INTO VAL FROM PRODUCT_CATEGORIES WHERE UPPER(NOMBRE) = UPPER(XNAME);
    
    RETURN VAL;
END;
$$

/*DEVUELVE 1 SI EXISTE CURP SI NO DEVUELVE NULL*/
DROP PROCEDURE IF EXISTS SP_EXIST_CURP;
DELIMITER $$
CREATE PROCEDURE SP_EXIST_CURP(IN XCURP VARCHAR(18))
BEGIN
	DECLARE FLAG INT DEFAULT NULL;
    
    SELECT 1 INTO FLAG FROM USERS WHERE UPPER(CURP) = (XCURP);
    
    SELECT FLAG FROM DUAL;
END;
$$

/*CREA UNA ORDEN DE SERVICIO EN LA TABLA SERVICE_ORDERS RECIBE: CURP DE CLIENTE, ALIAS EMPLEADO, FECHA <NULL>, HORA <NULL>*/
DROP PROCEDURE IF EXISTS SP_CREATE_SERVICE_ORDER;
DELIMITER $$
CREATE PROCEDURE SP_CREATE_SERVICE_ORDER(IN XCURP VARCHAR(18), IN ALIAS_EMP VARCHAR(50),IN XFECHA DATE, IN XHORA TIME)
BEGIN
	
    
    DECLARE CUST_ID INT;
    DECLARE XUSER_ID INT;
    DECLARE EID INT;
    DECLARE EUID INT;
    
    SET XUSER_ID = GET_USR_ID_CURP(XCURP);  
    
    SET EUID = GET_USR_ID_ALIAS(ALIAS_EMP);
    
    SELECT ID INTO EID FROM EMPLOYEES WHERE USER_ID  = EUID;
    
	BEGIN
		CALL SP_RESET_AI('SERVICE_ORDERS');
    END;
    
    IF(XFECHA IS NULL)THEN
		SET XFECHA = CURDATE();
    END IF;
    
    IF(XHORA IS NULL) THEN
		SET XHORA = CURRENT_TIME();
    END IF;
    
	
    INSERT INTO SERVICE_ORDERS(USER_ID,FECHA,HORA,FECHA_ENTREGA,EMPLOYEE_ID) VALUES(XUSER_ID, XFECHA, XHORA, 0, EID);
    
END;
$$

/*SE OBTIENE EL NUMERO DE ORDEN ACTUAL DE LA TABLA SERVICE_ORDERS*/
DROP PROCEDURE IF EXISTS SP_GET_ORDEN_NUMBER;
DELIMITER $$
CREATE PROCEDURE SP_GET_ORDEN_NUMBER()
BEGIN

	DECLARE XID INT;
    
    SELECT MAX(ID) INTO XID FROM SERVICE_ORDERS;
    
    IF(XID IS NULL) THEN
		SET XID = 1;
	ELSE
		SET XID = XID + 1;
    END IF;
    
    SELECT XID FROM DUAL;

END;
$$

/* SE OBTIENE EL NOMBRE DE LAS CATEGORIAS DE PRODUCTO */
DROP PROCEDURE IF EXISTS SP_GET_PRODUCTS_CATEGORIES;
DELIMITER $$
CREATE PROCEDURE SP_GET_PRODUCTS_CATEGORIES()
BEGIN

	SELECT NOMBRE FROM PRODUCT_CATEGORIES;

END;
$$

/*SE CREA UNA FALLA EN TABLA FAILURES RECIBE : NOMBRE DE FALLA, DESCRIPCION, TIEMPO PROMEDIO DE RESOLUCION*/
DROP PROCEDURE IF EXISTS SP_CREATE_FAILURE;
DELIMITER $$
CREATE PROCEDURE SP_CREATE_FAILURE(IN XNOMBRE VARCHAR(60), IN XDESC VARCHAR(500), IN XTIME INT)
BEGIN

	BEGIN
		
        CALL SP_RESET_AI('FAILURES');
    
    END;
    
    INSERT INTO FAILURES(NOMBRE,DESCRIPCION,TIEMPO_ESTIMADO) VALUES(XNOMBRE,XDESC,XTIME);

END;
$$

/*SE CREA CATEGORIA DE PRODUCTO EN TABLA PRODUCT_CATEGORIES RECIBE: NOMBRE DE CATEGORIA Y DESCRIPCION*/
DROP PROCEDURE IF EXISTS SP_CREATE_PRODUCTCAT;
DELIMITER $$
CREATE PROCEDURE SP_CREATE_PRODUCTCAT(IN XNOMBRE VARCHAR(100), IN DESCRIPCION VARCHAR(300))
BEGIN
	
    CALL SP_RESET_AI('PRODUCT_CATEGORIES');
	INSERT INTO PRODUCT_CATEGORIES(NOMBRE, DESCRIPCION) VALUES(XNOMBRE,DESCRIPCION);

END;
$$

/*SE CREA PUESTO EN TABLA JOBS RECIBE: NOMBRE, SALARIO MINIMO, SALARIO MAXIMO*/
DROP PROCEDURE IF EXISTS SP_CREATE_JOB;
DELIMITER $$
CREATE PROCEDURE SP_CREATE_JOB(IN XNAME VARCHAR(250), IN MIN_SAL DECIMAL, IN MAX_SAL DECIMAL)
BEGIN
	CALL SP_RESET_AI('EMPLOYEES');
	INSERT INTO JOBS(NOMBRE, MIN_SAL,MAX_SAL) VALUES(XNAME, MIN_SAL, MAX_SAL);

END;

$$

/*SE CREA EMPLEADO EN BASE A CURP, NOMBRE DEL PUESTO, FECHA_CONTRATACION Y SALARIO*/
DROP PROCEDURE IF EXISTS SP_CREATE_EMPLOYEE;
DELIMITER $$
CREATE PROCEDURE SP_CREATE_EMPLOYEE(IN XCURP VARCHAR(18), IN JOBNAME VARCHAR(250), IN FECHACONT DATE, IN SAL DECIMAL)
BEGIN
	DECLARE JID INT;
    DECLARE UID INT;
    BEGIN
		SELECT ID INTO UID FROM USERS WHERE UPPER(CURP) = UPPER(XCURP);
    END;
    SELECT ID INTO JID FROM JOBS WHERE UPPER(NOMBRE) = UPPER(JOBNAME);
    
    IF(FECHACONT IS NULL)THEN
		SET FECHACONT = CURDATE();
    END IF;
    
    IF (SAL IS NULL) THEN
		 SELECT MIN_SAL INTO SAL FROM JOBS WHERE ID = JID;
    END IF;
    
    
    CALL SP_RESET_AI('EMPLOYEES');
	INSERT INTO EMPLOYEES(USER_ID, JOB_ID, FECHA_CONTRATACION, SALARIO) VALUES(UID,JID,FECHACONT,SAL);

END;
$$


/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/
/*OBTENGO RESULTADOS DE CONSULTA USANDO LAS POSIBLES COMBINACIONES DE CAMPOS COMBINADOS DE CONSULTA EN LA VISTA VIEW_REGISTERS_DATA*/
DROP PROCEDURE IF EXISTS SP_REGISTERS_COMPLEX1;
DELIMITER $$
CREATE PROCEDURE SP_REGISTERS_COMPLEX1(IN XUSR VARCHAR(50), IN XNAME VARCHAR(50), IN FECHA1 VARCHAR(20), IN FECHA2 VARCHAR(20))
BEGIN
	DECLARE DAT1 DATE;
    DECLARE DAT2 DATE;
    DECLARE FLAG BOOLEAN;    
    SET FLAG = FALSE;
    
    IF XUSR = '' THEN
		SET XUSR = NULL;
    END IF;
    IF XNAME = '' THEN
		SET XNAME = NULL;
    END IF;
    IF FECHA1 = '' THEN
		SET FECHA1 = NULL;
    END IF;
    IF FECHA2 = '' THEN
		SET FECHA2 = NULL;
    END IF;
    
    
    IF FECHA1 IS NOT NULL THEN    
		SET DAT1 = STR_TO_DATE(FECHA1, "%Y-%m-%d");    
    END IF;
    
    IF FECHA2 IS NOT NULL THEN
		SET DAT2 = STR_TO_DATE(FECHA2, "%Y-%m-%d");    
    END IF;
    
    IF FLAG = FALSE THEN #FECHA1
    
		IF(FECHA2 IS NOT NULL AND FECHA1 IS NULL AND XUSR IS NULL AND XNAME IS NULL) THEN
			SELECT * FROM VIEW_REGISTERS_DATA WHERE FECHA = DAT2;
            SET FLAG = TRUE;
        END IF;
    
    END IF;    
    
    IF FLAG = FALSE THEN #FECHA1
    
		IF(FECHA1 IS NOT NULL AND FECHA2 IS NULL AND XUSR IS NULL AND XNAME IS NULL) THEN
			SELECT * FROM VIEW_REGISTERS_DATA WHERE FECHA = DAT1;
            SET FLAG = TRUE;
        END IF;
    
    END IF;
    
    IF FLAG = FALSE THEN #FECHA1 FECHA2
		IF(FECHA1 IS NOT NULL AND FECHA2 IS NOT NULL AND XUSR IS NULL AND XNAME IS NULL) THEN
			SELECT * FROM VIEW_REGISTERS_DATA WHERE FECHA BETWEEN DAT1 AND DAT2;
            SET FLAG = TRUE;
        END IF;
    END IF;
    
    IF FLAG = FALSE THEN #NOMBRE DE USUARIO
		
        IF(XNAME IS NOT NULL AND XUSR IS NULL AND FECHA1 IS NULL AND FECHA2 IS NULL) THEN			
            SELECT * FROM VIEW_REGISTERS_DATA WHERE NOMBRE LIKE CONCAT(XNAME,'%');
            SET FLAG = TRUE;
        END IF;
    
    END IF;
    
    IF FLAG = FALSE THEN #ALIAS
		
        IF(XUSR IS NOT NULL AND XNAME IS NULL AND FECHA1 IS NULL AND FECHA2 IS NULL) THEN
			SELECT * FROM VIEW_REGISTERS_DATA WHERE ALIAS_USUARIO = XUSR;
			SET FLAG = TRUE;			
        END IF;
    
    END IF;
    
    IF FLAG = FALSE THEN  # ALIAS FECHA1 FECHA2
    
		IF(XUSR IS NOT NULL AND XNAME IS NULL AND FECHA1 IS NOT NULL AND FECHA2 IS NOT NULL) THEN
					
			SELECT * FROM VIEW_REGISTERS_DATA WHERE ALIAS_USUARIO = XUSR AND FECHA BETWEEN DAT1 AND DAT2;
			SET FLAG = TRUE;
			
		END IF;
    
    END IF;
    
    IF FLAG = FALSE THEN #NOMBRE FECHA1 FECHA2
    
		IF(XUSR IS NULL AND XNAME IS NOT NULL AND FECHA1 IS NOT NULL AND FECHA2 IS NOT NULL) THEN
        
        SELECT * FROM VIEW_REGISTERS_DATA WHERE NOMBRE_DE_USUARIO LIKE CONCAT(XNAME,'%') AND FECHA BETWEEN DAT1 AND DAT2;
        SET FLAG = TRUE;   
        
        END IF;
    
    END IF;
	
    
    IF FLAG = FALSE THEN #DEFAULT
		        
		IF(XUSR IS NULL AND XNAME IS NULL AND FECHA1 IS NULL AND FECHA2 IS NULL) THEN
			SELECT * FROM VIEW_REGISTERS_DATA;
            SET FLAG = TRUE;
        END IF;
    
    END IF;
    
    
END;
$$

/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

/*OBTENGO NOMBRE DEL PRIVILEGIO QUE LE CORRESPONDE A UNA CRENDECIAL DE ACCESO EN BASE AL ALIAS DE USUARIO*/
DROP PROCEDURE IF EXISTS SP_GET_USR_TYPE;
DELIMITER $$
CREATE PROCEDURE  SP_GET_USR_TYPE(IN XALIAS VARCHAR(50))
BEGIN
	SELECT REPLACE(P.NOMBRE,' ','') AS ROL FROM PRIVILEGES AS P WHERE P.ID = (SELECT PRIVILEGE_ID FROM CREDENTIALS WHERE ALIAS = XALIAS);
END;
$$
/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/
/* SE CREA REGISTRO EN TABLA REGISTERS SE PROVEE EL CODIGO DE EVENTO, ALIAS DE USUARIO Y COMENTARIO(SI SE DIO DE ALTA A UN USUARIO ES EL ALIAS DEL  MISMO) */
DROP PROCEDURE IF EXISTS SP_CREATE_REGISTER_COMM;
DELIMITER $$
CREATE PROCEDURE SP_CREATE_REGISTER_COMM(IN ETYPE VARCHAR(50), IN ALIAS VARCHAR(50), IN XCC VARCHAR(200))
BEGIN	
    
	DECLARE XIDCREDENTIAL INT;
    DECLARE XIDEVENT INT;
    
    CALL SP_RESET_AI('REGISTERS');
    
    SET XIDEVENT = GET_EVENTID(ETYPE);
    SET XIDCREDENTIAL = GET_CREDENTIAL_ID(ALIAS);
    
    INSERT INTO REGISTERS(IDEVENT,IDCREDENTIAL, COMMENTS) VALUES(XIDEVENT, XIDCREDENTIAL, XCC);
END;
$$
/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

/* CREA REGISTRO EN LA TABLA REGISTERS, SE PROVEE CODIGO DE EVENTO Y ALIAS DE USUARIO CORRESPONDIENTE AL EVENTO*/
DROP PROCEDURE IF EXISTS SP_CREATE_REGISTER;
DELIMITER $$
CREATE PROCEDURE SP_CREATE_REGISTER(IN ETYPE VARCHAR(50), IN ALIAS VARCHAR(50))
BEGIN	
    
	DECLARE XIDCREDENTIAL INT;
    DECLARE XIDEVENT INT;
    
    CALL SP_RESET_AI('REGISTERS');
    
    SET XIDEVENT = GET_EVENTID(ETYPE);
    SET XIDCREDENTIAL = GET_CREDENTIAL_ID(ALIAS);
    
    INSERT INTO REGISTERS(IDEVENT,IDCREDENTIAL) VALUES(XIDEVENT, XIDCREDENTIAL);
END;
$$

/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/
/*OBTIENE EVENT_ID DE LA TABLA EVENTOS EN BASE AL CODIGO DE EVENTO ENVIADO COMO ARGUMENTO*/
DROP FUNCTION IF EXISTS GET_EVENTID;
DELIMITER $$
CREATE FUNCTION GET_EVENTID(XCODE VARCHAR(50)) RETURNS INT DETERMINISTIC
BEGIN
	DECLARE XID INT;
    DECLARE NOCONTROL INT;
    SET NOCONTROL = 1;
    
	SELECT ID INTO XID FROM EVENTS WHERE UPPER(CODE) LIKE CONCAT(UPPER(XCODE),'%') LIMIT 1;
    
    IF XID IS NULL THEN
		SET XID = NOCONTROL;
    END IF;
		
    RETURN XID;
END;
$$

/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

/*RESETEA LA CLAVE PRIMARIA AUTO INCREMENTAL DEL NOMBRE DE LA TABLA EMPLEADO SE USA SQL DINAMICO*/
DROP PROCEDURE IF EXISTS SP_RESET_AI;
DELIMITER $$
CREATE PROCEDURE SP_RESET_AI(IN TNAME VARCHAR(100))
BEGIN
	SET @STMT = CONCAT('ALTER TABLE ',TNAME,' AUTO_INCREMENT = 1');
    
    PREPARE DIN FROM @STMT;
    EXECUTE DIN;
    DEALLOCATE PREPARE DIN;
END ;
$$

/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

/*CREA EVENTO DEL SISTEMA : RECIBE NOMBRE Y DESCRIPCION*/
DROP PROCEDURE IF EXISTS SP_CREATE_EVENT;
DELIMITER $$
CREATE PROCEDURE SP_CREATE_EVENT(IN XNAME VARCHAR(50), IN XDESC VARCHAR(250))
BEGIN
	CALL SP_RESET_AI('EVENTS');
	INSERT INTO EVENTS(EVENTS.NAME, EVENTS.DESC) VALUES(XNAME,XDESC);
END;
$$
/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

/* REGRESA EL SIGUIENTE ID DE LA TABLA EVENTOS */
DROP FUNCTION IF EXISTS GET_NEXTID_EVENTS; 
DELIMITER $$
CREATE FUNCTION GET_NEXTID_EVENTS () RETURNS INT DETERMINISTIC
BEGIN
	DECLARE AIP INT;    
    
    SELECT X INTO AIP FROM(SELECT MAX(EE.ID)+1 AS X FROM EVENTS EE) AS T1;
    
    IF AIP IS NULL THEN
		SET AIP = 1;
    END IF;
    
    RETURN AIP;

END ;
$$
/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

/*OBTIENE PRIVILEGE_ID EN BASE AL NOMBRE DEL PRIVILEGIO*/
DROP FUNCTION IF EXISTS GET_PRIVILEGE_ID;
DELIMITER $$
CREATE FUNCTION GET_PRIVILEGE_ID(NAMEPRIV VARCHAR(50)) RETURNS INT
DETERMINISTIC
BEGIN
	DECLARE XPRIVILEGE INT(10) DEFAULT 0;
    
    SELECT ID INTO XPRIVILEGE FROM PRIVILEGES WHERE UPPER(REPLACE(TRIM(NOMBRE),' ','')) = UPPER(REPLACE(TRIM(NAMEPRIV),' ',''));
	
    RETURN (XPRIVILEGE);

END $$
DELIMITER ;
/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

/*OBTIENE USER_ID EN BASE A ALIAS DE CREDENCIAL DE ACCESO*/
DROP FUNCTION IF EXISTS GET_USR_ID_ALIAS; 
DELIMITER $$
CREATE FUNCTION GET_USR_ID_ALIAS(XALIAS VARCHAR(50)) RETURNS INT DETERMINISTIC
BEGIN
	DECLARE UID INT DEFAULT NULL;
    
    SELECT USER_ID INTO UID FROM CREDENTIALS WHERE ALIAS = XALIAS;
    
    RETURN UID;
END;
$$

/*OBTIENE ID DE USUARIO EN BASE A BUSQUEDA DE CURP METODO 1*/
DROP FUNCTION IF EXISTS GET_USR_ID; 
DELIMITER $$
CREATE FUNCTION GET_USR_ID(XCURP VARCHAR(50)) RETURNS INT
DETERMINISTIC
BEGIN
	DECLARE XID INT(10) DEFAULT 0;
    
    SELECT ID INTO XID FROM USERS WHERE UPPER(TRIM(CURP)) = UPPER(TRIM(XCURP));
	
    RETURN (XID);

END $$
DELIMITER ;


/*OBTIENE USR_ID POR POR CURP METODO 2*/
DROP FUNCTION IF EXISTS GET_USR_ID_CURP; 
DELIMITER $$
CREATE FUNCTION GET_USR_ID_CURP(XCURP VARCHAR(18)) RETURNS INT DETERMINISTIC
BEGIN
	DECLARE VAL INT;
    SET VAL = NULL;
    
    SELECT ID INTO VAL FROM USERS WHERE UPPER(CURP) = UPPER(XCURP);
    
    RETURN VAL;
END;
$$

/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

DROP FUNCTION IF EXISTS GET_CREDENTIAL_ID; /*OBTIENE ID DE CREDENCIAL EN BASE A ALIAS DE CREDENCIAL*/
DELIMITER $$
CREATE FUNCTION GET_CREDENTIAL_ID(XALIAS VARCHAR(50)) RETURNS INT DETERMINISTIC
BEGIN
	DECLARE SEND INT;
    
    SELECT ID INTO SEND FROM CREDENTIALS WHERE ALIAS = XALIAS;
    
    RETURN SEND;
END;
$$

/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

DROP PROCEDURE IF EXISTS SP_CREATE_USER;
DELIMITER $$
CREATE PROCEDURE  SP_CREATE_USER(IN  XNAME VARBINARY(2048) ,IN XAPE VARBINARY(2048) , IN XRFC VARCHAR(13) , IN XCURP VARCHAR(18), IN XCALLE VARBINARY(2048), IN XCOLONIA VARBINARY(2048), IN XNUMERO VARCHAR(10), IN XCP INT(11), IN XFECHA VARCHAR(15), IN XCIUDAD VARBINARY(2048), IN XESTADO VARCHAR(50), IN XCORREO VARCHAR(50), IN XTEL1 VARCHAR(20), IN XTEL2 VARCHAR(20))
BEGIN
	CALL SP_RESET_AI('USERS');
    INSERT INTO USERS (NOMBRE, APELLIDO, RFC, CURP, CALLE, COLONIA, NUMERO, CP, FECHA_NACIMIENTO, CIUDAD, ESTADO, CORREO, TEL_CEL, TEL_CASA) VALUES(XNAME,XAPE,XRFC,XCURP,XCALLE,XCOLONIA, XNUMERO,XCP, STR_TO_DATE(XFECHA,"%Y-%m-%d"), XCIUDAD, XESTADO, XCORREO, XTEL1, XTEL2);
    
END $$
DELIMITER ;

/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

DROP PROCEDURE IF EXISTS SP_CREATE_CREDENTIALS;
DELIMITER $$
CREATE PROCEDURE SP_CREATE_CREDENTIALS(IN XALIAS VARCHAR(50), IN XPASSWORD VARCHAR(50),IN XTYPE VARCHAR(50), IN XCURP VARCHAR(50))
BEGIN
	CALL SP_RESET_AI('CREDENTIALS');
	INSERT INTO CREDENTIALS (PRIVILEGE_ID,USER_ID,ALIAS,PASSWORD) VALUES(GET_PRIVILEGE_ID(XTYPE), GET_USR_ID(XCURP), XALIAS, MD5(XPASSWORD));
END $$
DELIMITER  ;
/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

DROP PROCEDURE IF EXISTS SP_LOGIN;
DELIMITER $$
CREATE PROCEDURE SP_LOGIN(XALIAS VARCHAR(50), XPASSWORD VARCHAR(50)) 
BEGIN

	SELECT * FROM CREDENTIALS WHERE ALIAS = XALIAS AND PASSWORD = MD5(XPASSWORD) LIMIT 1;
    
END $$
DELIMITER  ;
/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

DROP PROCEDURE IF EXISTS SP_EXIST_USRNAME;
DELIMITER $$
CREATE PROCEDURE SP_EXIST_USRNAME(IN XNAME VARCHAR(40))
BEGIN
	SELECT * FROM CREDENTIALS WHERE ALIAS = XNAME OR UPPER(ALIAS) = UPPER(XNAME) LIMIT 1;
END $$
DELIMITER ;
/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

DROP PROCEDURE IF EXISTS SP_CREATE_CUSTOMER;
DELIMITER $$
CREATE PROCEDURE SP_CREATE_CUSTOMER(IN XNAME VARCHAR(40), IN XPASS VARCHAR(200), IN XCURP VARCHAR(18))
BEGIN	
	CALL SP_CREATE_CREDENTIALS(XNAME, XPASS, 'CLIENTE', XCURP);
END $$
DELIMITER ;
/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

DROP PROCEDURE IF EXISTS SP_DELETE_USER;
DELIMITER $$
CREATE PROCEDURE SP_DELETE_USER (IN XCURP VARCHAR(18))
BEGIN
	DELETE FROM USERS WHERE CURP = XCURP;
    ALTER TABLE USERS AUTO_INCREMENT = 1;
END$$
DELIMITER ;
/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

DROP PROCEDURE IF EXISTS SP_CREATE_PRIVILEGE;
DELIMITER $$
CREATE PROCEDURE SP_CREATE_PRIVILEGE(IN XNAME VARCHAR(50), IN XDESC VARCHAR(100))
BEGIN
	CALL SP_RESET_AI('PRIVILEGES');
	INSERT INTO PRIVILEGES(NOMBRE,DESCRIPCION) VALUES(XNAME,XDESC);
END;
$$
/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/

DROP PROCEDURE IF EXISTS SP_CLEAN_DB;
DELIMITER $$
CREATE PROCEDURE SP_CLEAN_DB()
BEGIN
	DELETE FROM REGISTERS;
    DELETE FROM CREDENTIALS;
    DELETE FROM PRIVILEGES;        
    DELETE FROM EVENTS;
    
    DELETE FROM FAILURES_PRODUCTS;
    DELETE FROM FAILURES;
    DELETE FROM PRODUCTS;
    DELETE FROM PRODUCT_CATEGORIES;    
    DELETE FROM SERVICE_ORDERS;
    DELETE FROM CUSTOMERS;
    DELETE FROM EMPLOYEES;
    DELETE FROM JOBS;
    
    DELETE FROM USERS;
    
END ;
$$
/* --------------------------@CHECHESWAP--------------------------------------------------------------------@CHECHESWAP*-------------------------------------------------------------@CHECHESWAP------------------------------------------------------------------@CHECHESWAP*/




COMMIT;









